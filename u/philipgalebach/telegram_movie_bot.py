import wmill
import json
from movie_mood_generator import main as generate_movie_moods

# Type definition for Telegram resource
type Telegram = {
    "token": str
}

def main(telegram_auth: Telegram, update: dict) -> dict:
    """
    Telegram bot webhook handler for movie mood generation
    
    Args:
        telegram_auth: Telegram bot resource with token
        update: Telegram update object from webhook
    
    Returns:
        Dictionary with response status and any reply sent
    """
    
    try:
        # Extract message details from Telegram update
        if 'message' not in update:
            return {"status": "no_message", "response": "No message in update"}
        
        message = update['message']
        chat_id = message['chat']['id']
        
        # Check if message has text
        if 'text' not in message:
            return send_telegram_message(
                telegram_auth, 
                chat_id, 
                "🎬 Please send me a movie title and I'll tell you the mood words for it!"
            )
        
        text = message['text'].strip()
        
        # Handle commands
        if text.startswith('/'):
            if text.lower() in ['/start', '/help']:
                welcome_message = (
                    "🎬 *Movie Mood Generator Bot* 🎭\n\n"
                    "Send me any movie title and I'll generate mood words that describe it!\n\n"
                    "*Examples:*\n"
                    "• Inception\n"
                    "• The Dark Knight\n"
                    "• Pulp Fiction\n"
                    "• Star Wars\n\n"
                    "Just type the movie name - no commands needed! ✨"
                )
                return send_telegram_message(telegram_auth, chat_id, welcome_message, parse_mode="Markdown")
            else:
                return send_telegram_message(
                    telegram_auth, 
                    chat_id, 
                    "🤔 Unknown command. Just send me a movie title!"
                )
        
        # If empty message
        if not text:
            return send_telegram_message(
                telegram_auth, 
                chat_id, 
                "🎬 Please send me a movie title!"
            )
        
        # Generate mood words for the movie
        print(f"Generating moods for movie: {text}")
        mood_result = generate_movie_moods(text)
        
        # Format response based on success/failure
        if mood_result.get('success', False):
            response_text = (
                f"🎬 *{mood_result['movie']}*\n\n"
                f"🎭 **Mood Words:** {mood_result['moods']}\n\n"
                f"✨ _Generated by {mood_result.get('model_used', 'AI')}_"
            )
            parse_mode = "Markdown"
        else:
            error_msg = mood_result.get('error', 'Unknown error occurred')
            response_text = (
                f"❌ Sorry, I couldn't generate mood words for '{text}'\n\n"
                f"Error: {error_msg}\n\n"
                f"Please try again with another movie title! 🎬"
            )
            parse_mode = None
        
        # Send response back to user
        return send_telegram_message(telegram_auth, chat_id, response_text, parse_mode=parse_mode)
        
    except Exception as e:
        print(f"Error in telegram bot handler: {str(e)}")
        # Try to send error message to user if possible
        try:
            if 'message' in update and 'chat' in update['message']:
                chat_id = update['message']['chat']['id']
                return send_telegram_message(
                    telegram_auth, 
                    chat_id, 
                    f"🚨 Oops! Something went wrong. Please try again later.\n\nError: {str(e)}"
                )
        except:
            pass  # If we can't even send error message, just return error status
        
        return {
            "status": "error", 
            "error": str(e),
            "update_received": update
        }


def send_telegram_message(telegram_auth: Telegram, chat_id: int, text: str, parse_mode: str = None) -> dict:
    """
    Send a message via Telegram bot
    
    Args:
        telegram_auth: Telegram resource with bot token
        chat_id: Telegram chat ID to send message to
        text: Message text to send
        parse_mode: Optional parse mode (Markdown, HTML, etc.)
    
    Returns:
        Dictionary with send status and response
    """
    
    import requests
    
    try:
        url = f"https://api.telegram.org/bot{telegram_auth['token']}/sendMessage"
        
        payload = {
            "chat_id": chat_id,
            "text": text
        }
        
        if parse_mode:
            payload["parse_mode"] = parse_mode
        
        response = requests.post(url, json=payload)
        response.raise_for_status()
        
        return {
            "status": "message_sent",
            "response": response.json(),
            "chat_id": chat_id,
            "text_length": len(text)
        }
        
    except requests.exceptions.RequestException as e:
        print(f"Failed to send Telegram message: {str(e)}")
        return {
            "status": "send_failed",
            "error": str(e),
            "chat_id": chat_id
        }
    except Exception as e:
        print(f"Unexpected error sending message: {str(e)}")
        return {
            "status": "unexpected_error",
            "error": str(e),
            "chat_id": chat_id
        }


# Test function for local development
if __name__ == "__main__":
    # Test with a sample Telegram update
    test_update = {
        "message": {
            "chat": {"id": 123456789},
            "text": "Inception"
        }
    }
    
    # Note: This won't work locally without proper Telegram auth
    # but shows the structure for testing
    print("Telegram Movie Bot Handler - Use with Windmill webhook")
    print(f"Test update structure: {json.dumps(test_update, indent=2)}")
